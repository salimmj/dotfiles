# .functions

# Create a new directory and enter it
mkd() {
    mkdir -p "$@" && cd "$_"
}

# Change working directory to the top-most Finder window location
cdf() {
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
targz() {
    local tmpFile="${@%.tar.gz}.tar"
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

    size=$(
        stat -f"%z" "${tmpFile}" 2>/dev/null # macOS `stat`
        stat -c"%s" "${tmpFile}" 2>/dev/null # GNU `stat`
    )

    local cmd=""
    if ((size < 52428800)) && hash zopfli 2>/dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli"
    else
        if hash pigz 2>/dev/null; then
            cmd="pigz"
        else
            cmd="gzip"
        fi
    fi

    echo "Compressing .tar using \`${cmd}\`â€¦"
    "${cmd}" -v "${tmpFile}" || return 1
    [ -f "${tmpFile}" ] && rm "${tmpFile}"
    echo "${tmpFile}.gz created successfully."
}

# Determine size of a file or total size of a directory
fs() {
    if du -b /dev/null >/dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* ./*
    fi
}

# Use Git's colored diff when available
diff() {
    git diff --no-index --color-words "$@"
}

# Compare original and gzipped file size
gz() {
    local origsize=$(wc -c <"$1")
    local gzipsize=$(gzip -c "$1" | wc -c)
    local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
    printf "orig: %d bytes\n" "$origsize"
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Run `dig` and display the most useful info
digga() {
    dig +nocmd "$1" any +multiline +noall +answer
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
    if grep -q Microsoft /proc/version; then
        # Ubuntu on Windows using the Linux subsystem
        alias open='explorer.exe'
    else
        alias open='xdg-open'
    fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
o() {
    if [ $# -eq 0 ]; then
        open .
    else
        open "$@"
    fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

ipreal() {
    if [ "$(uname)" = "Darwin" ]; then
        if ! which ip >/dev/null 2>&1; then
            echo "Installing ip command for macOS (this will only happen once)"
            brew install iproute2mac
        fi
    elif [ "$(uname)" = "Linux" ]; then
        if ! which ip >/dev/null 2>&1; then
            echo "The 'ip' command is not installed. Please install it using your distribution's package manager."
            return 1
        fi
    else
        echo "Unsupported operating system"
        return 1
    fi
    ip route get $1 | awk '{print $NF; exit}'
}

killport() {
    local port=$1
    local dry_run=false

    # Check if dry run option is provided
    if [[ "$2" == "--dry-run" || "$2" == "-d" ]]; then
        dry_run=true
    fi

    # Validate port number
    if ! [[ "$port" =~ ^[0-9]+$ ]] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
        echo "Error: Invalid port number. Please provide a number between 1 and 65535."
        return 1
    fi

    # Find the process ID using the port
    local pid=$(lsof -ti tcp:$port)

    if [ -z "$pid" ]; then
        echo "No process found running on port $port"
        return 0
    fi

    # Get process details
    local process_info=$(ps -p $pid -o comm=)

    if $dry_run; then
        echo "Dry run: Would kill process '$process_info' (PID: $pid) running on port $port"
    else
        echo "Killing process '$process_info' (PID: $pid) running on port $port"
        kill -9 $pid
        echo "Process killed successfully"
    fi
}

whichport() {
    local port=$1

    # Validate port number
    if ! [[ "$port" =~ ^[0-9]+$ ]] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
        echo "Error: Invalid port number. Please provide a number between 1 and 65535."
        return 1
    fi

    # Find process information using the port
    local process_info=$(lsof -i :$port)

    if [ -z "$process_info" ]; then
        echo "No process found running on port $port"
    else
        echo "Process information for port $port:"
        echo "$process_info"

        # Extract PID and get additional details
        local pid=$(echo "$process_info" | awk 'NR==2 {print $2}')
        if [ -n "$pid" ]; then
            echo -e "\nAdditional process details:"
            ps -p $pid -o pid,ppid,user,%cpu,%mem,start,command
        fi
    fi
}


whichprocess() {
    local process_name=$1
    shift
    local case_sensitive=false
    local show_threads=false
    local sort_by="cpu"
    local kill_processes=false

    # Parse optional arguments
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            -c|--case-sensitive)
                case_sensitive=true
                shift
                ;;
            -t|--show-threads)
                show_threads=true
                shift
                ;;
            -s|--sort)
                if [[ -n $2 ]]; then
                    sort_by="$2"
                    shift 2
                else
                    echo "Error: --sort requires an argument."
                    return 1
                fi
                ;;
            -k|--kill)
                kill_processes=true
                shift
                ;;
            *)
                echo "Unknown parameter: $1"
                return 1
                ;;
        esac
    done

    # Prepare grep options
    local grep_opts="-i"
    [[ "$case_sensitive" == true ]] && grep_opts=""

    # Prepare ps options
    local ps_opts="aux"
    [[ "$show_threads" == true ]] && ps_opts="axH"

    # Prepare sort options
    local sort_column
    case "$sort_by" in
        cpu) sort_column=3 ;;
        mem) sort_column=4 ;;
        pid) sort_column=2 ;;
        *)
            echo "Invalid sort option. Using CPU."
            sort_column=3
            ;;
    esac

    # Use tput for terminal-friendly colors
    echo "Processes matching '$process_name':"
    local process_list
    process_list=$(ps $ps_opts | grep $grep_opts "$process_name" | grep -v grep | sort -rnk"$sort_column")

    if [[ -z "$process_list" ]]; then
        echo "No matching processes found."
        return 0
    fi

    echo "$process_list" | \
    awk -v c_user=$(tput setaf 2) \
        -v c_pid=$(tput setaf 3) \
        -v c_cpu=$(tput setaf 6) \
        -v c_mem=$(tput setaf 5) \
        -v c_start=$(tput setaf 7) \
        -v c_reset=$(tput sgr0) \
    'BEGIN {OFS="\t"} {
        if (NR == 1) {
            printf "%s%-15s%s %s%-10s%s %s%-8s%s %s%-8s%s %s%-20s%s %s\n",
            c_user, "USER", c_reset,
            c_pid, "PID", c_reset,
            c_cpu, "%CPU", c_reset,
            c_mem, "%MEM", c_reset,
            c_start, "START", c_reset,
            "COMMAND"
        }
        command = ""
        for (i=11; i<=NF; i++) command = command " " $i
        printf "%s%-15s%s %s%-10s%s %s%-8s%s %s%-8s%s %s%-20s%s %s\n",
        c_user, $1, c_reset,
        c_pid, $2, c_reset,
        c_cpu, $3, c_reset,
        c_mem, $4, c_reset,
        c_start, $9, c_reset,
        command
    }'
    echo "----------------------------------------------"

    if [ "$kill_processes" = true ]; then
        echo "Killing all listed processes..."
        echo "$process_list" | awk '{print $2}' | xargs -r kill -9
        echo "All matching processes have been terminated."
    fi
}
